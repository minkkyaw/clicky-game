{"version":3,"sources":["utils/change-element-position.js","component/navbar/navbar.component.jsx","component/score-board/score-board.component.jsx","component/intro/intro.component.jsx","component/game-images/game-images.component.jsx","component/footer/footer.component.jsx","data/imagesData.js","pages/homepage/homepage.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","changeElementPosition","arr","length","randomIndexArr","randomNumber","Math","floor","random","includes","push","getRandomIndex","map","idx","arrToObj","ele","i","id","imageUrl","Navbar","className","ScoreBoard","props","Object","keys","key","replace","Intro","score","topScore","Score","Top-Score","GameImages","images","slice","image","data-id","onClick","handleImageCLick","style","backgroundImage","Footer","href","HomePage","state","clickedImageIds","handleImageClick","event","setState","index","target","dataset","this","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yGAmBAA,EAAOC,QAAU,CAAEC,sBATW,SAAAC,GAE5B,OAZqB,SAAAC,GAErB,IADA,IAAIC,EAAiB,GACdA,EAAeD,OAASA,GAAQ,CACrC,IAAIE,EAAeC,KAAKC,MAAMD,KAAKE,SAAWL,GACzCC,EAAeK,SAASJ,IAC3BD,EAAeM,KAAKL,GAExB,OAAOD,EAIUO,CAAeT,EAAIC,QAAQS,KAAI,SAAAC,GAAG,OAAIX,EAAIW,OAQnBC,SAJzB,SAAAZ,GACf,OAAOA,EAAIU,KAAI,SAACG,EAAKC,GAAN,MAAa,CAAEC,GAAID,EAAGE,SAAUH,S,kTCDlCI,G,MATA,WACb,OACE,yBAAKC,UAAU,WACb,wBAAIA,UAAU,YAAd,eACA,wBAAIA,UAAU,YAAd,+BCFSC,G,MAJI,SAACC,GAAD,OACjBC,OAAOC,KAAKF,GAAOV,KAAI,SAACa,EAAKT,GAAN,OAAY,uBAAGI,UAAU,oBAAoBK,IAAKT,GAAG,0BAAMI,UAAU,aAAaK,EAAIC,QAAQ,IAAK,KAA9C,KAA2D,0BAAMN,UAAU,SAASE,EAAMG,UCgBzJE,G,MAfD,SAACL,GAAW,IAChBM,EAAoBN,EAApBM,MAAOC,EAAaP,EAAbO,SACf,OACA,yBAAKT,UAAU,mBACb,yBAAKA,UAAU,iBACb,2CACA,wGAEF,yBAAKA,UAAU,eACb,kBAAC,EAAD,CAAYU,MAAOF,EAAOG,YAAWF,QCO5BG,G,MAlBI,SAACV,GAAD,OACjB,yBAAKF,UAAU,yBACb,yBAAKA,UAAU,uBACXE,EAAMW,OAAOC,MAAM,EAAE,IAAItB,KAAI,SAACuB,GAAW,IAC7BlB,EAAiBkB,EAAjBlB,GAAIC,EAAaiB,EAAbjB,SACZ,OACA,yBAAKE,UAAU,qBAAqBK,IAAKR,GACvC,yBAAKG,UAAU,aAAagB,UAASnB,EAAIoB,QAASf,EAAMgB,iBAAkBC,MAAO,CAACC,gBAAgB,OAAD,OAAStB,EAAT,gBCDhGuB,G,MANA,kBACb,4BAAQrB,UAAU,oBAChB,uBAAGsB,KAAK,iCAAR,qBCWWT,EAjBA,CACb,oDACA,oDACA,gCACA,wCACA,wCACA,wCACA,wCACA,4CACA,+CACA,0CACA,gCACA,iCACA,iCACA,iC,OCmCaU,G,iNApCXC,MAAQ,CACRX,OAAQ,GACRY,gBAAiB,GACjBjB,MAAO,EACPC,SAAU,G,EAMZiB,iBAAmB,SAACC,GAClB,EAAKC,SAAS,CAAEf,OAAQhC,gCAAsB,EAAK2C,MAAMX,UACzD,IAAIgB,EAAQF,EAAMG,OAAOC,QAAQlC,GAC7B,EAAK2B,MAAMC,gBAAgBpC,SAASwC,GAOjC,EAAKD,SAAS,CAAEpB,MAAO,EAAIiB,gBAAiB,KANjD,EAAKG,SAAS,CACZH,gBAAgB,GAAD,mBAAM,EAAKD,MAAMC,iBAAjB,CAAkCI,IACjDrB,MAAO,EAAKgB,MAAMhB,MAAQ,IACzB,WACE,EAAKgB,MAAMf,SAAW,EAAKe,MAAMhB,OAAO,EAAKoB,SAAS,CAAEnB,SAAU,EAAKe,MAAMhB,Y,mFAVpFwB,KAAKJ,SAAS,CAAEf,OAAQhC,gCAAsBa,mBAASmB,Q,+BAe/C,IAAD,EAC6BmB,KAAKR,MAAjCX,EADD,EACCA,OAAQL,EADT,EACSA,MAAOC,EADhB,EACgBA,SACvB,OACE,yBAAKT,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAOQ,MAAOA,EAAOC,SAAUA,IAC/B,kBAAC,EAAD,CAAYI,OAAQA,EAAQK,iBAAkBc,KAAKN,mBACnD,kBAAC,EAAD,W,GA/BeO,IAAMC,YCGdC,G,uLARX,OACE,6BACE,kBAAC,EAAD,W,GAJUF,IAAMC,YCOJE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.725b692b.chunk.js","sourcesContent":["const getRandomIndex = length => {\n  let randomIndexArr = [];\n  while (randomIndexArr.length < length) {\n    let randomNumber = Math.floor(Math.random() * length);\n    if (!randomIndexArr.includes(randomNumber))\n      randomIndexArr.push(randomNumber);\n  }\n  return randomIndexArr;\n};\n\nconst changeElementPosition = arr => {\n  let changedArr = getRandomIndex(arr.length).map(idx => arr[idx]);\n  return changedArr;\n};\n\nconst arrToObj = arr => {\n  return arr.map((ele, i) => ({ id: i, imageUrl: ele }));\n};\n\nmodule.exports = { changeElementPosition, arrToObj };\n","import React from 'react';\n\nimport './navbar.styles.scss';\n\n\n\nconst Navbar = () => {\n  return (\n    <div className=\"nav-bar\">\n      <h1 className=\"nav-logo\">CLICKY GAME</h1>\n      <h2 className=\"nav-note\">Click an image to begin!</h2>\n    </div>\n  )\n}\n\nexport default Navbar;","import React from 'react';\n\nimport './score-board.styles.scss';\n\nconst ScoreBoard = (props) => (\n  Object.keys(props).map((key, i) => <p className=\"score-board-score\" key={i}><span className=\"width-150\">{key.replace('-', ' ')}:</span><span className=\"score\">{props[key]}</span></p>)\n)\n\nexport default ScoreBoard;","import React from 'react';\n\nimport ScoreBoard from './../score-board/score-board.component'\n\nimport './intro.styles.scss';\n\nconst Intro = (props) => {\n  const { score, topScore } = props;\n  return (\n  <div className=\"intro-container\">\n    <div className=\"intro-details\">\n      <h2>Clicky Game</h2>\n      <p>Click on an image to earn points, but don't click on any more than once!</p>\n    </div>\n    <div className=\"score-board\">\n      <ScoreBoard Score={score} Top-Score={topScore} />\n    </div>\n  </div>\n  )\n}\n\nexport default Intro;","import React from 'react';\n\nimport './game-images.styles.scss';\n\nconst GameImages = (props) => (\n  <div className=\"game-images-container\">\n    <div className=\"game-images-wrapper\">\n      { props.images.slice(0,12).map((image) => {\n            const { id, imageUrl } = image;\n            return (\n            <div className=\"game-image-wrapper\" key={id}> \n              <div className=\"game-image\" data-id={id} onClick={props.handleImageCLick} style={{backgroundImage: `url(${imageUrl})`}} ></div>\n            </div>\n            );\n          }\n        )\n      }\n    </div>  \n  </div>\n);\n\n\nexport default GameImages;","import React from 'react';\n\nimport './footer.styles.scss';\n\nconst Footer = () => (\n  <footer className=\"footer-container\">\n    <a href=\"https://minkyaw.herokuapp.com\">Min Khant Kyaw</a>\n  </footer>\n)\n\nexport default Footer;","const images = [\n  \"./images/blue-water-sailing-4-1437277-640x480.jpg\",\n  \"./images/blue-water-sailing-4-1437278-640x480.jpg\",\n  \"./images/boat-4364637_640.jpg\",\n  \"./images/luxury-yacht-1620040_640.jpg\",\n  \"./images/luxury-yacht-2431474_640.jpg\",\n  \"./images/luxury-yacht-3430348_640.jpg\",\n  \"./images/sailboat-1552734-640x512.jpg\",\n  \"./images/sailing-ship-1441014-638x440.jpg\",\n  \"./images/sailing-the-bay-1507847-639x426.jpg\",\n  \"./images/the-island-1616361-639x452.jpg\",\n  \"./images/yacht-188901_640.jpg\",\n  \"./images/yacht-2081824_640.jpg\",\n  \"./images/yacht-3430346_640.jpg\",\n  \"./images/yacht-582360_640.jpg\"\n];\n\nexport default images;\n","import React from 'react';\n\nimport Navbar from '../../component/navbar/navbar.component';\nimport Intro from './../../component/intro/intro.component';\nimport GameImages from './../../component/game-images/game-images.component';\nimport Footer from './../../component/footer/footer.component';\n\nimport images from './../../data/imagesData';\nimport { changeElementPosition, arrToObj } from './../../utils/change-element-position';\n\nimport './homepage.styles.scss';\n\nclass HomePage extends React.Component {\n    state = {\n    images: [],\n    clickedImageIds: [],\n    score: 0,\n    topScore: 0\n  };\n\n  componentDidMount() {\n    this.setState({ images: changeElementPosition(arrToObj(images))});\n  }\n  handleImageClick = (event) => {\n    this.setState({ images: changeElementPosition(this.state.images)});\n    let index = event.target.dataset.id;\n    if(!this.state.clickedImageIds.includes(index)) {\n      this.setState({\n        clickedImageIds: [...this.state.clickedImageIds, index],\n        score: this.state.score + 1\n      }, () => {\n        if(this.state.topScore < this.state.score) this.setState({ topScore: this.state.score})\n      })\n    } else this.setState({ score: 0 , clickedImageIds: []});\n  };\n\n  render() {\n    const { images, score, topScore } = this.state;\n    return (\n      <div className=\"home-page\">\n        <Navbar />\n        <Intro score={score} topScore={topScore} />\n        <GameImages images={images} handleImageCLick={this.handleImageClick} />\n        <Footer />\n      </div>\n      )\n  }\n}\n\nexport default HomePage;","import React from \"react\";\n\nimport HomePage from \"./pages/homepage/homepage.component\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <HomePage />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}